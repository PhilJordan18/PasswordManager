{varType array $applications}

<div class="modal fade" id="editAccountModal" tabindex="-1" aria-labelledby="editAccountModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="editAccountModalLabel">Modifier un compte</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editAccountForm">
                    <input type="hidden" id="editAccountId" name="account_id">
                    <div class="mb-3">
                        <label for="editAppSelect" class="form-label">Application</label>
                        <select class="form-select" id="editAppSelect" name="app_id" required>
                            <option value="">Sélectionner une application</option>
                            {foreach $applications as $app}
                                <option value="{$app->id}">{$app->name}</option>
                            {/foreach}
                            <option value="other">Autre</option>
                        </select>
                        <div class="invalid-feedback" id="app_idError"></div>
                    </div>
                    <div class="mb-3 d-none" id="editCustomAppContainer">
                        <label for="editCustomAppName" class="form-label">Nom de l'application</label>
                        <input type="text" class="form-control" id="editCustomAppName" name="custom_app_name">
                        <div class="invalid-feedback" id="custom_app_nameError"></div>
                    </div>
                    <div class="mb-3">
                        <label for="editAccountUsername" class="form-label">Nom d'utilisateur/Email</label>
                        <input type="text" class="form-control" id="editAccountUsername" name="username" required>
                        <div class="invalid-feedback" id="usernameError"></div>
                    </div>
                    <div class="mb-3">
                        <label for="editAccountPassword" class="form-label">Mot de passe</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="editAccountPassword" name="password" required>
                            <button class="btn btn-outline-secondary" type="button" id="editGeneratePasswordBtn">
                                <i class="bi bi-key"></i> Générer
                            </button>
                        </div>
                        <div class="form-text">Utilisez notre générateur pour créer un mot de passe sécurisé</div>
                        <div class="invalid-feedback" id="passwordError"></div>
                    </div>
                    <div class="mb-3">
                        <label for="editUserPassword" class="form-label">Votre mot de passe</label>
                        <input type="password" class="form-control" id="editUserPassword" name="user_password" required>
                        <div class="invalid-feedback" id="user_passwordError"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" id="saveEditAccountBtn">Enregistrer</button>
            </div>
        </div>
    </div>
</div>

<script n:syntax=off nonce={$nonce}>
    document.addEventListener('DOMContentLoaded', () => {
        const appSelect = document.getElementById('editAppSelect');
        const customAppContainer = document.getElementById('editCustomAppContainer');
        const saveAccountBtn = document.getElementById('saveEditAccountBtn');
        const generatePasswordBtn = document.getElementById('editGeneratePasswordBtn');
        const accountPassword = document.getElementById('editAccountPassword');

        appSelect.addEventListener('change', () => {
            customAppContainer.classList.toggle('d-none', appSelect.value !== 'other');
        });

        generatePasswordBtn.addEventListener('click', async () => {
            try {
                const response = await fetch('/generate-password', { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    accountPassword.value = data.password;
                    accountPassword.type = 'text';
                    setTimeout(() => { accountPassword.type = 'password'; }, 3000);
                } else {
                    alert('Erreur lors de la génération du mot de passe');
                }
            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur réseau : ' + error.message);
            }
        });

        saveAccountBtn.addEventListener('click', async () => {
            const form = document.getElementById('editAccountForm');
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            document.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');

            try {
                const formData = new FormData(form);
                const accountId = document.getElementById('editAccountId').value;
                const response = await fetch(`/accounts/${accountId}/update`, {
                    method: 'POST',
                    body: formData
                });
                const data = await response.json();
                if (data.success) {
                    bootstrap.Modal.getInstance(document.getElementById('editAccountModal')).hide();
                    window.location.reload();
                } else {
                    if (data.error && typeof data.error === 'object') {
                        Object.entries(data.error).forEach(([field, message]) => {
                            const input = form.querySelector(`[name="${field}"]`);
                            const errorDiv = document.getElementById(`${field}Error`);
                            if (input && errorDiv) {
                                input.classList.add('is-invalid');
                                errorDiv.textContent = message;
                            }
                        });
                    } else {
                        alert('Erreur : ' + (data.error || 'Erreur inconnue'));
                    }
                }
            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur réseau : ' + error.message);
            }
        });
    });
</script>